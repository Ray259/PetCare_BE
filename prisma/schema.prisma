// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @default(uuid()) @id
  email String @unique
  username String
  password String?
  phone String?
  role Role @default(user)
  avatar String?
  gender Gender?
  pet Pet[]
  notification Notification[]
  refreshToken String[]
}

enum Role {
  user
  admin
}

enum Gender {
  male
  female
}

model Pet {
  id String @default(uuid()) @id
  name String
  age Int
  weight Float
  color String
  gender Gender
  breed String
  avatar String
  ownerId String
  disease String?
  owner User @relation(fields: [ownerId], references: [id])
  healthcareServices HealthcareService[]
  groomingServices GroomingService[]
  boardingServices BoardingService[]
  appointments Appointments[]
}

model HealthcareService {
  id String @default(uuid()) @id
  petId String
  description String? @db.Text
  temperature Float?
  heartRate Int?
  respiratoryRate Int?
  weight Float?
  bodyCondition String? @db.Text
  symptoms String? @db.Text
  bloodTest String? @db.Text
  urineTest String? @db.Text
  xRay String? @db.Text
  diagnosis String? @db.Text
  diet String? @db.Text
  date DateTime
  medicine String[]
  additionalInfo Json?
  pet Pet @relation(fields: [petId], references: [id], onDelete: Cascade)
  isApproved Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model GroomingService {
  id String @default(uuid()) @id
  petId String
  date DateTime
  additionalInfo Json?
  pet Pet @relation(fields: [petId], references: [id], onDelete: Cascade)
  isApproved Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model BoardingService {
  id String @default(uuid()) @id
  petId String
  cage Int?
  address String?
  date DateTime
  additionalInfo Json?
  isApproved Boolean? @default(false)
  pet Pet @relation(fields: [petId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Appointments {
  id String @default(uuid()) @id
  petId String
  doctor String?
  description String? @db.Text
  status String?
  followUp Boolean @default(false)
  date DateTime
  additionalInfo Json?
  isApproved Boolean? @default(false)
  pet Pet @relation(fields: [petId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Medicine {
  id String @default(uuid()) @id
  name String
  description String? @db.Text
}

model Notification {
  id String @default(uuid()) @id
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  title String
  description String? @db.Text
  date DateTime
  additionalInfo Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
